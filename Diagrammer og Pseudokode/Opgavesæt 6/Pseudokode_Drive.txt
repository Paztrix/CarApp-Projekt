En Drive metode der først tjekker om motoren en tændt, hvis den ikke er tændt skriver den en besked til console.
Hvis motoren er tændt skal der beregnes brændstofforbrug og pris for turen, hvorefter odometeret opdateres.
Herefter opdateres Trip objekterne med de nye værdier og til sidst udskrives resultaterne til console.

1. Tjekke om motor er tændt
2. Beregne brændstofforbrug og turpris
3. Opdatere Odometer og Trip objekter
4. Udskrive resultater

Pseudokode:
Method: Drive(Trip trip)
	//Tjekker om motoren er tændt
	If Car.EngineIsOn() is false
		Display "Motoren er slukket"
		Stop execution
	
	//Beregn brændstofforbrug og turpris
	Calculate brændstofforbrug = trip.Distance / Car.FuelEfficiency
	Calculate turpris = brændstofforbrug * Car.CostPerKilometer

	//Opdatere bilens odometer med turens distance
	Car.Odometer = Car.Odometer + trip.Distance
	
	//Opdatere Trip-objektet med nye værdier
	trip.FuelUsed = brændstofforbrug
	trip.TripPrice = turpris

	//Udskriv resultat
	Display "Brændstofforbrug: " + brændstofforbrug + " liter"
	Display "Turpris: " + turpris + " kroner"
	Display "Opdateret odometer: " + Car.Odometer

Implementering:
public void Drive(Trip trip) {
	if (!IsEngineOn()) {
		Console.WriteLine("Motoren er slukket");
		return;
	}

	double brændstofforbrug = trip.Distance / Car.FuelEfficiency;
	double turpris = brændstofforbrug * Car.CostPerKilometer;

	Odometer += trip.Distance;
	
	trip.FuelUsed = brændstofforbrug;
	trip.TripPrice = turpris;

	Console.WriteLine($"Brændstofforbrug: {brændstofforbrug:F2} liter");
	Console.WriteLine($"Turpris: {turpris:F2} kroner");
	Console.WriteLine($"Opdateret odometer: {Odometer}");
}

Unit Test:
namespace DriveTest
{
    [TestClass]
    public class CarTests
    {
        private Car _car;
        private Trip _trip;

        // Initialize a new car and trip before each test
        [TestInitialize]
        public void Setup()
        {
            _car = new Car(
                "Toyota",          // brand
                "Corolla",         // model
                 2025,             // year
                'A',               // gear (for automatic)
                15.0,              // kmPerLiter (fuel efficiency)
                FuelType.Benzin,   // fuelType
                10000              // odometer (starting km)
            );

            _trip = new Trip(
                100,                        // distance (100 km)
                DateTime.Now.Date,          // tripDate (current date)
                DateTime.Now,               // startTime (current time)
                DateTime.Now.AddHours(1)    // endTime (1 hour after the start time)
            );
        }

        //Test scenarie hvor motoren er tændt
        [TestMethod]
        public void Drive_EngineIsOn_UpdatesOdometerAndCalculatesFuelUsed()
        {
            //Arrange: Sæt motoren som tændt
            _car.IsEngineOn = true;

            //Act: kald Drive metoden
            _car.Drive(_trip);

            //Assert: Tjek om odometeret bliver opdateres og om brændstofforbruget bliver udregnet rigtigt
            Assert.AreEqual(100, _car.Odometer); //Odometer skulle være 100 efter en tur
            Assert.AreEqual(100 / _car.KmPerLiter, _trip.FuelUsed); //FuelUsed burde være distancen divideret med fuel efficiency
            Assert.AreEqual(100 * _car.LiterPrice, _trip.TripPrice); //TripPrice burde være distancen gange pris per kilometer
        }

        //Test scenarie hvor motoren er slukket
        [TestMethod]
        public void Drive_EngineIsOff_DoesNotUpdateOdometer()
        {
            //Arrange: Sæt motoren som slukket
            _car.IsEngineOn = false;

            double initialOdometer = _car.Odometer;
    
            //Act: kalder Drive metoden
            _car.Drive(_trip);

            //Assert: Tjek at odometeret ikke bliver opdateret og der blivver sendt den rigitge fejl-besked
            Assert.AreEqual(initialOdometer, _car.Odometer); //Odometeret skulle gerne være uændret, for at tjekke fejl-besked skal der laves en mock consol for at se det
        }

        [TestMethod]
        public void Drive_EngineIsOff_DisplayErrorMessage()
        {
            //Arrange: Sæt motoren som slukket
            _car.IsEngineOn = false;
            var stringWriter = new StringWriter();
            Console.SetOut(stringWriter);

            //Act: kalder Drive metoden
            _car.Drive(_trip);

            //Assert: verificer at fejl-beskeden blev sendt
            string output = stringWriter.ToString();
            Assert.IsTrue(output.Contains("Motoren er slukket."));
        }
    }
}